## Create a function that will take a DNA string and return the number of 
## As, Ts, Gs, and Cs of the string
def countDNA(dna_str):
    ## Store the input DNA string as a string object
    dna_str = str(dna_str)
    
    ## Create empty lists for each of the nucleotides
    num_A = []
    num_C = []
    num_G = []
    num_T = []

    ## Iterate through the length of the string to find each of the different nucleotides and append to 
    ## corresponding list
    for i in range(len(dna_str)):
        if dna_str[i] == "A":
            num_A.append(dna_str[i])
        elif dna_str[i] == "C":
            num_C.append(dna_str[i])
        elif dna_str[i] == 'G':
            num_G.append(dna_str[i])
        elif dna_str[i] == 'T':
            num_T.append(dna_str[i])
        else:
            ## This is an error case if there is a letter that is not expected in a DNA string
            ## Sometimes there might be letters other than A, T, G, or C
            return 'Error'

    ## The return statement just outputs the number of As, C, Gs, and Ts of the DNA string
    return str(len(num_A)) + " " + str(len(num_C)) + " " + str(len(num_G)) + " " + str(len(num_T))

## Prints out the number of each nucleotide
print(countDNA('TGCGCTCTGTCTTTGCTAGTGTTGCGAGTTCTAAGTTCCTACTGTCTCTCTACCTACCGCATTACTAAGTCTCACGAAGGCCGTCATTAGTGTGTTTAAAGGATAAGGTACCTGAGACGAGGTCAGAAGCGTTGCCACAGAGGATCGTAAACAGCTTCGTCAGAAGATGACTCGTATGTTACAGCAGACTGAAGTATGACTCCTGTGGCAAATTTGAGCATGGCACCGCTAGGCATACTCCCGTACCTTGACAGTAACGACCTATGTATACGACAGCTGCCGGAAGGCCTGGACCATGGTAGGCCCATCGCCACATGCCAGTTGGACCCGAGCGGGATTAGTAATCTCAGCCAATTCCGAGGAGTACTTCTGACGTCGTGCTCTCGTACACTATTGTCTCAAATCCGGCCTCGGAATTCGCCTCCGCACAGTATCAGGGGGTTACGTTAAGTTCTAGACCTGTATACAACTCGTTAGTCGCCACAACAAACCTCGCTCCGGTGGGGAGCGACACAGCCTGCTGAGACGGCCGAATTTCTCACTTGTTGCAGACAATTCCTCCCATGGTTGATTCACAGCGTGGCAGTCCGTCGCATTGTTTCAAAGAACGCTCAGTAGTGCCGTGCGCGGAGTGCCCGGTAGTTACCAACCACTTTGGAATAAGTACTGCGGCGGGGTTTGTCACGTACTCCCGAAAACCTTAGAGATGCACGTATCCTGCAAAAGCCCCAACTTACAACTACTGAACGGTAATCACGTGGACGCAATCAAAGCTGACCACTGCGGCATCGAATCGAACCTAGCCCTGCGCGCTAAGACAGGAAGGGAGGGTAGAAAAGCATACGAAGGGTCACTGATGTTAGCGCTACGCCAACCCAGTTAATATAAGAGTTCGGCAGTGCGAGCTCCGACTAGGTTATGCCATGACTTCGTCTGCACGGCACTGATGAGCTGCGCCAAGTCC'))
